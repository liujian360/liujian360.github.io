<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liujian&#39;s Blog</title>
  
  <subtitle>白茶清欢两无事，我在等风也等你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-03T06:11:48.730Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘建</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot基于SpringAop实现Mysql的读写分离(多数据源)</title>
    <link href="http://yoursite.com/2018/07/03/SpringBoot%E5%9F%BA%E4%BA%8ESpringAop%E5%AE%9E%E7%8E%B0Mysql%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>http://yoursite.com/2018/07/03/SpringBoot基于SpringAop实现Mysql的读写分离-多数据源/</id>
    <published>2018-07-03T05:40:45.000Z</published>
    <updated>2018-07-03T06:11:48.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文源代码主要来源于简书作者“险远的奇伟诡怪”的文章<a href="https://www.jianshu.com/p/8813ec02926a" target="_blank" rel="noopener">Spring Boot 集成Mybatis实现主从（多数据源）分离方案</a>，感谢作者的奉献，但是由于作者写的代码pull下来后未能实现主从分离，而且有诸多bug存在，遂写该文记录一下。</p></blockquote><a id="more"></a><p><strong>如下图原作者评论区，大部分读者都未实现主从分离：</strong></p><div align="center"><br><br><img src="https://upload-images.jianshu.io/upload_images/6552032-b1ced3ad54e22cde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原作者的评论区"><br><br></div><p>通过debug发现，启动后程序并没有进入MybatisConfiguration中的sqlSessionFactory的方法，所有主从配置未初始化到spring容器中。究其原因，是因为作者定义的方法和父类的方法名返回值都一模一样，程序走了父类MybatisAutoConfiguration中sqlSessionFactory的方法默认的配置，所有从库未生效。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSessionFactoryBean factory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">    factory.setDataSource(dataSource);</span><br><span class="line">    factory.setVfs(SpringBootVFS.class);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.properties.getConfigLocation())) &#123;</span><br><span class="line">      factory.setConfigLocation(<span class="keyword">this</span>.resourceLoader.getResource(<span class="keyword">this</span>.properties.getConfigLocation()));</span><br><span class="line">    &#125;</span><br><span class="line">    factory.setConfiguration(properties.getConfiguration());</span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(<span class="keyword">this</span>.interceptors)) &#123;</span><br><span class="line">      factory.setPlugins(<span class="keyword">this</span>.interceptors);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.databaseIdProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">      factory.setDatabaseIdProvider(<span class="keyword">this</span>.databaseIdProvider);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(<span class="keyword">this</span>.properties.getTypeAliasesPackage())) &#123;</span><br><span class="line">      factory.setTypeAliasesPackage(<span class="keyword">this</span>.properties.getTypeAliasesPackage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(<span class="keyword">this</span>.properties.getTypeHandlersPackage())) &#123;</span><br><span class="line">      factory.setTypeHandlersPackage(<span class="keyword">this</span>.properties.getTypeHandlersPackage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(<span class="keyword">this</span>.properties.resolveMapperLocations())) &#123;</span><br><span class="line">      factory.setMapperLocations(<span class="keyword">this</span>.properties.resolveMapperLocations());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> factory.getObject();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>找到问题后，修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123; DataSourceConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfiguration</span> <span class="keyword">extends</span> <span class="title">MybatisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(MybatisConfiguration.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"masterDataSource"</span>)</span><br><span class="line"><span class="keyword">private</span> DataSource masterDataSource;</span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"slaveDataSource"</span>)</span><br><span class="line"><span class="keyword">private</span> DataSource slaveDataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.sqlSessionFactory(roundRobinDataSouceProxy());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ReadWriteSplitRoutingDataSource <span class="title">roundRobinDataSouceProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ReadWriteSplitRoutingDataSource proxy = <span class="keyword">new</span> ReadWriteSplitRoutingDataSource();</span><br><span class="line">Map&lt;Object, Object&gt; targetDataResources = <span class="keyword">new</span> ClassLoaderRepository.SoftHashMap();</span><br><span class="line"><span class="comment">// Map&lt;Object, Object&gt; targetDataResources = new HashMap&lt;Object, Object&gt;();</span></span><br><span class="line">targetDataResources.put(ReadWriteSplitRoutingDataSource.DbType.MASTER, masterDataSource);</span><br><span class="line">targetDataResources.put(ReadWriteSplitRoutingDataSource.DbType.SLAVE, slaveDataSource);</span><br><span class="line">proxy.setDefaultTargetDataSource(masterDataSource);</span><br><span class="line">proxy.setTargetDataSources(targetDataResources);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动不报错了，但是访问<a href="http://localhost:8080/dictype/all，报下面异常" target="_blank" rel="noopener">http://localhost:8080/dictype/all，报下面异常</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: DataSource router not initialized</span><br></pre></td></tr></table></figure><p>dataSource未初始化，debug发现，源码类AbstractRoutingDataSource中初始化DataSource发现，传递给父类的datasource需要是DataSource类型或者String类型，而我们在自定义类MybatisConfiguration中封装DataSource的时候使用的是SoftHashMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static class SoftHashMap extends AbstractMap &#123;</span><br><span class="line">private Map&lt;Object, SpecialValue&gt; map;</span><br><span class="line">boolean recordMiss = true; // only interested in recording miss stats sometimes</span><br><span class="line">private ReferenceQueue rq = new ReferenceQueue();</span><br><span class="line"></span><br><span class="line">public SoftHashMap(Map&lt;Object, SpecialValue&gt; map) &#123;</span><br><span class="line">this.map = map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SoftHashMap() &#123;</span><br><span class="line">this(new HashMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察SoftHashMap源码发现：SoftHashMap的value值类型为SpecialValue类型，不是上面源码需要的DataSource类型或者String类型，所以修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@AutoConfigureAfter(&#123; DataSourceConfiguration.class &#125;)</span><br><span class="line">public class MybatisConfiguration extends MybatisAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">private static Log logger = LogFactory.getLog(MybatisConfiguration.class);</span><br><span class="line"></span><br><span class="line">@Resource(name = &quot;masterDataSource&quot;)</span><br><span class="line">private DataSource masterDataSource;</span><br><span class="line">@Resource(name = &quot;slaveDataSource&quot;)</span><br><span class="line">private DataSource slaveDataSource;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public SqlSessionFactory sqlSessionFactoryTest(ReadWriteSplitRoutingDataSource dataSource) throws Exception &#123;</span><br><span class="line">logger.info(&quot;-------------------- 重载父类 sqlSessionFactory init---------------------&quot;);</span><br><span class="line">return super.sqlSessionFactory(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public ReadWriteSplitRoutingDataSource roundRobinDataSouceProxy() &#123;</span><br><span class="line">ReadWriteSplitRoutingDataSource proxy = new ReadWriteSplitRoutingDataSource();</span><br><span class="line">Map&lt;Object, Object&gt; targetDataResources = new HashMap&lt;Object, Object&gt;();</span><br><span class="line">targetDataResources.put(ReadWriteSplitRoutingDataSource.DbType.MASTER, masterDataSource);</span><br><span class="line">targetDataResources.put(ReadWriteSplitRoutingDataSource.DbType.SLAVE, slaveDataSource);</span><br><span class="line">proxy.setDefaultTargetDataSource(masterDataSource);</span><br><span class="line">proxy.setTargetDataSources(targetDataResources);</span><br><span class="line"></span><br><span class="line">return proxy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启后再次访问<a href="http://localhost:8080/dictype/all，发现完美的调用了从库的地址：" target="_blank" rel="noopener">http://localhost:8080/dictype/all，发现完美的调用了从库的地址：</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init datasource error, url: jdbc:mysql:<span class="comment">//192.168.249.128:3381/db-test?characterEncoding=UTF-8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"></span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect <span class="number">3</span> times. Giving up.</span><br></pre></td></tr></table></figure></p><p>至此，完美实现多数据源主从分离。</p><p>综上，遇到问题要多debug,多方位考虑问题的症结所在。</p><p><a href="https://gitee.com/liujian360/Springbootdbseparate" target="_blank" rel="noopener">修改后的源码地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文源代码主要来源于简书作者“险远的奇伟诡怪”的文章&lt;a href=&quot;https://www.jianshu.com/p/8813ec02926a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot 集成Mybatis实现主从（多数据源）分离方案&lt;/a&gt;，感谢作者的奉献，但是由于作者写的代码pull下来后未能实现主从分离，而且有诸多bug存在，遂写该文记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yoursite.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="读写分离" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="多数据源" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    
  </entry>
  
</feed>
